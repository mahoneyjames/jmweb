<html><head><title>Email alerts for Android app crashes | James Mahoney</title><link rel="stylesheet" href="/style.css"/><link href="https://netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.min.css" rel="stylesheet"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta charset="UTF-8"/></head><body><header><div class="inner"> <h1><a href="/index.htm">James Mahoney</a></h1><nav><ul><li>                          <a href="/about.htm">about</a></li><li><a href="/index.htm">blog            </a></li></ul></nav></div></header><div class="wrapper"><main class="content"><div class="Container"><h1>Email alerts for Android app crashes</h1><div class="body"><p>For capturing errors in an Android app, <a href="https://github.com/ACRA/acra">ACRA</a> is great. </p>
<blockquote>
  <p>ACRA catches the error, turns it into JSON and then persists that data on a web server using the <em><a href="https://github.com/ACRA/acra-storage">acra-storage</a></em> CouchDB app. The <em><a href="https://github.com/ACRA/acralyzer">acralyzer</a></em> CouchDB HTML app provides a nice front end to view error information. </p>
</blockquote>
<p>One thing it lacks is a mechanism to notify about new errors via email, but what it does have is an RSS feed of the latest errors that have been uploaded. Combine this with a script executed every few minutes and you have a simple alerting system. </p>
<h4 id="entergoogleappscriptshttpsdevelopersgooglecomappsscript">Enter....<a href="https://developers.google.com/apps-script/">Google App Scripts</a>.</h4>
<p>Think of this as a Javascript environment hosted by Google. It was designed to add scripting capabilities to Google documents and spreadsheets, but since it includes a timer based trigger for executing scripts it can be used to provide a hosted alerting system</p>
<p>There's nothing much to the script</p>
<ol>
<li>Download the RSS feed</li>
<li>Work through the items until we find the first one that we've sent already, or we reach the end</li>
<li>Add the details of any unset items to an email</li>
<li>Send the email</li>
<li>Make a note of the guid of the first error item we included in the email, so that next time the script runs we know where to stop including items</li>
</ol>
<h2 id="acralyzerrssfeed">Acralyzer RSS feed</h2>
<p>This is the structure of the URL you need</p>
<blockquote>
  <p>https://server/CouchDB/<em>design/acra-storage/</em>list/rss/recent-items?descending=true</p>
</blockquote>
<h3 id="rssxmlexample">RSS XML Example</h3>
<pre><code>&lt;rss version="0.91"&gt;
  &lt;channel&gt;
    &lt;title&gt; latest Crash Reports&lt;/title&gt;
    &lt;link&gt;http://username.cloudant.com/acralyzer/_design/acralyzer/index.html#/dashboard/type&lt;/link&gt;
    &lt;description&gt;Acralyzer latest crash reports.&lt;/description&gt;
    &lt;item&gt;
      &lt;title&gt;java.lang.NullPointerException: This is a test exception to test logging : SupportSettingsActivity.java:79&lt;/title&gt;
      &lt;link&gt;http://username.cloudant.com/acralyzer/_design/acralyzer/index.html#/report-details/type/36242529-580c-4703-bfab-d42dac5e4a06&lt;/link&gt;
      &lt;description&gt;
        &lt;p&gt;app_version: 1.0.14&lt;/p&gt;&lt;p&gt;android_version: 4.2.2&lt;/p&gt;
        &lt;p&gt;device: samsung samsung GT-S7580&lt;/p&gt;
        &lt;p&gt;crash line: java.lang.NullPointerException: This is a test exception to test logging at ....&lt;/p&gt;
      &lt;/description&gt;
      &lt;guid&gt;36242529-580c-4703-bfab-d42dac5e4a06&lt;/guid&gt;
      &lt;pubDate&gt;2015-07-23T15:17:32.000Z&lt;/pubDate&gt;
    &lt;/item&gt;
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
<h3 id="authenticationusingcloudant">Authentication using Cloudant</h3>
<blockquote>
  <p>Cloudant provides hosting of CouchDB apps. It's a common choice when setting up <em>acra-storage</em> because their free plans are pretty generous.</p>
</blockquote>
<p>Cloudant handles authentication with a username and what they term an "API Key". (Or, username and password...)</p>
<p>When calling the RSS feed you need to supply the details of a user that has been granted <strong>read</strong> access to your <em>acra-storage</em> instance. </p>
<p>See this link for information</p>
<blockquote>
  <p><a href="https://docs.cloudant.com/authentication.html" target="_blank">https://docs.cloudant.com/authentication.html</a></p>
</blockquote>
<p>You need to supply your username and API key via a HTTP Header called "Authorization"</p>
<p>More usefully, here's how to do it using our script</p>
<pre><code>var options =
{
    "headers": 
    {
    "Authorization":"Basic c2F5c29tZljI=="
    }
};

var xml = UrlFetchApp.fetch(sourceRssUrl, options).getContentText();
</code></pre>
<h4 id="base64encodingyourusernameandpassword">Base64 encoding your username and password</h4>
<p>The simplest way to get this is to use a HTTP Proxy (e.g. Fiddler) and then access your <em>acralyzer</em> front end in your browser. Sign in with the user you're going to use for script. Once signed in you can inspect the headers and grab the Base64 encoded details. </p>
<h2 id="parsingthexml">Parsing the XML</h2>
<pre><code>//Use the XmlService to parse the XML
var document = XmlService.parse(xml);

var root = document.getRootElement();

//get the &lt;channel&gt; element  
var xChannel = root.getChild("channel");

//There's not much more to it than that.
</code></pre>
<h3 id="trackingthemostrecentlysentguid">Tracking the most recently sent guid</h3>
<p>You can use the PropertiesService to persist data across script runs. Think of this as name/value pairs linked to your Google account. </p>
<pre><code>var userProperties = PropertiesService.getUserProperties();

//get a property
var lastDocumentId = userProperties.getProperty("somekey");

//save a property
userProperties.setProperty("somekey","somevalue");
</code></pre>
<h4 id="sendinganemail">Sending an email</h4>
<p>Google makes this easy for us</p>
<pre><code>MailApp.sendEmail("bob@gmail.com", title, emailBody);
</code></pre>
<h2 id="setthescriptupingoogleappscript">Set the script up in Google App Script</h2>
<blockquote>
  <p>These instructions were correct at the time of writing, but we all know Google's penchant for releasing often...</p>
</blockquote>
<ol>
<li><p>In Google Drive click on the big red button labeled "New", choose "More" and then "Google Apps Script"</p></li>
<li><p>From the dialog that pops up, go ahead and choose "Blank project"</p></li>
<li><p>Give the project a suitable name and save it</p></li>
<li><p>Copy the <a href="#fullScript">script</a> into the code editor and save it</p>
<blockquote>
  <p>Now you need to manually run your function for the first time. This is important because it's how you grant any permissions your script needs</p>
</blockquote></li>
<li><p>There's a drop down that says "select function" in the toolbar. This contains a list of all functions in your script. Select the function "sendAlerts" then click the play button</p>
<ul>
<li><p>You will be prompted that authorisation is required. Go ahead and set up any permissions the script needs</p></li>
<li><p>When the script starts you'll see a little tooltip like popup near the top of the window. </p></li>
<li><p>If everything has gone to plan, that's all you'll see. Assuming you've got some errors in your acra-storage database you should receive an email</p></li></ul></li>
<li><p>The final step is to schedule your script to run. Click on the project triggers icon in the toolbar, and away you go</p></li>
</ol>
<h3 id="ifyourscriptfailstorun">If your script fails to run...</h3>
<p>You'll see a red tooltip like popup inviting you to view details of the failure</p>
<p>The View menu also has a couple of options to help with debugging - the Execution Transcript and Logs</p>
<p>Logs - This is what you've explicitly written via a call to Logger.Log</p>
<p>Execution transcripts - this is the logs, plus diagnostic information that the execution engine generates</p>
<h3 id="errorsthattrippedmeup">Errors that tripped me up</h3>
<h4 id="502badgateway">502 Bad Gateway</h4>
<p>I got this when my Base64 user credentials were incorrect i.e. Cloudant couldn't even begin to work out the username I was trying to use</p>
<h2 id="anamefullscriptfullscripta"><a name="fullScript">Full script</a></h2>
<pre><code>function sendAlerts()
{
  var recipientEmail=null;
  var acraServerName="username.cloudant.com";
  var acraDatabaseName="acra-storage";
  var cloudantCredentials =null;


  processAcraErrors(recipientEmail,acraServerName,acraDatabaseName, cloudantCredentials);

}

function processAcraErrors(recipientEmail,acraServerName,acraDatabaseName,cloudantCredentials)
{

  if(recipientEmail==null)
  {
    throw new Error("recipientEmail is null");
  }

  if(cloudantCredentials==null)
  {
    throw new Error("cloudantCredentials is null");
  }

  var userProperties = PropertiesService.getUserProperties();

  var lastNotificationKey = acraDatabaseName + "_lastNotificationDocumentId";

  var lastDocumentId = userProperties.getProperty(lastNotificationKey);

  Logger.log("last key=" + lastDocumentId);


  var sourceRssUrl = "https://xServerNamex/xDatabaseNamex/_design/acra-storage/_list/rss/recent-items?descending=true";
  sourceRssUrl = sourceRssUrl.replace("xServerNamex", acraServerName);
  sourceRssUrl = sourceRssUrl.replace("xDatabaseNamex", acraDatabaseName);

  Logger.log("URL:" + sourceRssUrl);

  var options = 
  {
      "headers": {
        "Authorization":"Basic " + cloudantCredentials
        }
  };


  var xml = UrlFetchApp.fetch(sourceRssUrl, options).getContentText();

  //Need to escape fake XML tags that are included in some error details
  var regEx = new RegExp("&lt;unknown&gt;",'g');
  xml = xml.replace(regEx,"[unknown]");

  var document = XmlService.parse(xml);
  var root = document.getRootElement();
  var xChannel = root.getChild("channel");
  var title = null;
  var link = null;

  if(xChannel!=null)
  {


    title = xChannel.getChild("title");
    if(title!=null)
    {
      title = title.getText();
    }

    link = xChannel.getChild("link");
    if(link!=null)
    {
      link = link.getText();
    }

    Logger.log("title:" + title);
    Logger.log("link:" + link);


    var lastItemSendIndex = -1;

    //grab an array of all the &lt;item&gt; elements in the RSS feed
    var items = xChannel.getChildren("item");

    //Work through it, looking for an element that has a &lt;guid&gt; 
    //which matches the &lt;guid&gt; we saved the last time the script ran.
    //This gives us the point in the list at which to stop including
    //error details
    for(var index=0;index&lt;items.length; index++)
    {
      var itemGuid = items[index].getChild("guid").getText();

      if(itemGuid==lastDocumentId)
      {
        lastItemSendIndex = index;
        break;
      }

    }


    Logger.log("last index:" + lastItemSendIndex);

    if(lastItemSendIndex==-1)
    {
      //We have never sent alerts for any of our items...
      lastItemSendIndex = items.length;
    }


    //Now we can build our sophisticated email content
    var emailBody = "";

    for(var index=0; index&lt;lastItemSendIndex;index++)
    {
      emailBody +="----------------------------------\n";
      emailBody+=items[index].getChild("title").getText() + "\n";
      emailBody+=items[index].getChild("pubDate").getText() + "\n";
      emailBody+=items[index].getChild("link").getText() + "\n";
      emailBody+="\n";
    }

    Logger.log(emailBody);

    if(emailBody!="")
    {

      emailBody = "Recent errors:\n\n" + emailBody;

      MailApp.sendEmail(recipientEmail, title, emailBody);

      if(items.length&gt;0)
      {
        //Save the &lt;guid&gt; of the first &lt;item&gt;. New &lt;item&gt;
        //elements will appear above it in the array, meaning
        //that the next time the scripts runs we should include 
        //items between position 0 and wherever our &lt;guid&gt; ends up
        //in that future list
        lastDocumentId = items[0].getChild("guid").getText();
        userProperties.setProperty(lastNotificationKey,lastDocumentId);
      }
    }
    else
    {
      Logger.log("Nothing to send");
    }  
  }  
}
</code></pre></div></div></main></div></body></html>